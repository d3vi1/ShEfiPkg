
/* EFI_STATUS WriteActiveGraphicsAdaptorPCIRegs(IN EFI_HANDLE ImageHandle) { //First Approach

	EFI_HANDLE                          HandleBuffer;
	UINTN                               BufferSize;
	EFI_PCI_IO_PROTOCOL                *IoDev;
	EFI_HANDLE                         *MainVideoCardHandle;
	EFI_IO_WIDTH                        Width;
	EFI_DEVICE_PATH_PROTOCOL           *DevicePath;
	EFI_DEVICE_PATH_TO_TEXT_PROTOCOL   *DevicePathToText;
	UINTN                               VideoSegment;
	UINTN                               VideoBus;
	UINTN                               VideoDevice;
	UINTN                               VideoFunction;
	BOOLEAN                             processDevPath;
	
	IoDev               = NULL;
	MainVideoCardHandle = NULL;
    DevicePath          = NULL;
	Width               = EfiPciWidthUint8;
	BufferSize          =    0;
	VideoSegment        =    0;
	VideoBus            =    0;
	VideoDevice         =    0;
	VideoFunction       =    0;
	
	BufferSize = sizeof (EFI_HANDLE);
	
	//
	//Get all the EdidActive Protocol devices
	//
	Status = BS->LocateHandle(ByProtocol, &gEfiEdidActiveProtocolGuid, 0, &BufferSize, &HandleBuffer);
	if (EFI_ERROR (Status)) { Print(L"WritePCIReg: LocateHandleBuffer for EdidActive: %r\n", Status); return Status; };
	
	//
	//Out of all the PciIo Protocol instances, select the one with EdidActive
	//
	processDevPath=FALSE;
	Status = BS->OpenProtocol (HandleBuffer, &gEfiPciIoProtocolGuid, NULL, ImageHandle, NULL, EFI_OPEN_PROTOCOL_TEST_PROTOCOL); //The device also has EDIDActive, thus is the main video card and assumably a PCI device.
	if (EFI_ERROR (Status)) { Print(L"WritePCIReg: HandleProtocol PciIo: %r\n", Status); processDevPath=TRUE; };

	MainVideoCardHandle=HandleBuffer;
	
	Status = BS->HandleProtocol (MainVideoCardHandle, &gEfiDevicePathProtocolGuid, (VOID *) &DevicePath);
	if (EFI_ERROR (Status)) { Print(L"WritePCIReg: Couldn't open DevicePath: %r\n", Status); return Status;};
	
	Status = BS->LocateProtocol (&gEfiDevicePathToTextProtocolGuid, NULL, (VOID *) &DevicePathToText);
	Print(L"Initial DevicePath: %s\n", DevicePathToText->ConvertDevicePathToText(DevicePath, TRUE, FALSE));
	
	if (processDevPath) {
		
		Print(L"WritePCIReg: DevPath doesn't end with PciIo. Using alternate code path.\n");
				
		Status = BS->LocateDevicePath(&gEfiPciIoProtocolGuid, &DevicePath, MainVideoCardHandle);
		if (EFI_ERROR (Status)) { Print(L"WritePCIReg: Could not find the handle above: %r\n", Status); return Status;};
		
		Print(L"Resulting DevicePath: %s\n", DevicePathToText->ConvertDevicePathToText(DevicePath, TRUE, FALSE));
		
		Print(L"I found the guilty parent handle with PciIo.\n");
		
	}
	
	//
	//We identified the Active Video Card. Let's use it now.
	//Let's first get a PCI IO Protocol on it.
	//
	Status = BS->HandleProtocol(MainVideoCardHandle, &gEfiPciIoProtocolGuid, (VOID *) &IoDev);
	if (EFI_ERROR (Status)) { Print(L"WritePCIReg HandleProtocol PciIo: %r\n", Status); return Status; }

	//
	//Save the Bus number for the video card AND
	//Set the PCI regs for the video card
	//
	if (IoDev == NULL) { 
		
		Print(L"No such Dev! \n");      //This shouldn't happen 
		Status = EFI_INVALID_PARAMETER; 
	
	} else {
	
		Print(L"We have a PCI Io Protocol for the Handle\n");
		Status=IoDev->Attributes (IoDev, EfiPciIoAttributeOperationEnable, EFI_PCI_IO_ATTRIBUTE_VGA_IO | EFI_PCI_IO_ATTRIBUTE_VGA_MEMORY | EFI_PCI_IO_ATTRIBUTE_IO | EFI_PCI_IO_ATTRIBUTE_BUS_MASTER, NULL);
		if (EFI_ERROR (Status)) { Print(L"WritePCIReg Iodev->Attributes: %r\n", Status); }
		Status=IoDev->GetLocation (IoDev, &VideoSegment, &VideoBus, &VideoDevice, &VideoFunction); //For debugging information
		if (EFI_ERROR (Status)) { Print(L"WritePCIReg Iodev->GetLocation: %r\n", Status); }

	}
	
	//
	//Print out the debugging information, to check if we have the correct device selected.
	//
	Print(L"Main PCI Video Card: Segment=%d Bus=%d, Device=%d Function=%d\n", VideoSegment, VideoBus, VideoDevice, VideoFunction);
	
	return EFI_SUCCESS;

}
*/

/* 
//////////////////////

		IoDev->Pci.Read (IoDev, EfiPciWidthUint32, 0, sizeof (PciHeader) / sizeof (UINT32), &PciHeader);
		IoDev->GetLocation (IoDev, &Segment, &Bus, &Device, &Function);


			Print(L"WritePciReg:   PCI VGA Adapter on %02x:%02x.%02x: VendorID: %04x, DeviceID: %04x, Class: %02x.%02x.%02x\n", Bus, Device, Function, PciHeader.VendorId, PciHeader.DeviceId, PciHeader.ClassCode[2], PciHeader.ClassCode[1], PciHeader.ClassCode[0]);
			
			Status = BS->HandleProtocol (HandleBuffer[Index], &gEfiDevicePathProtocolGuid, (VOID *) &DevicePath);
			if (EFI_ERROR (Status)) { Print(L"WritePciReg: Couldn't open DevicePath: %r\n", Status); return Status;};
			
			Status = BS->OpenProtocol (HandleBuffer[Index], &gEfiGraphicsOutputProtocolGuid, NULL, ImageHandle, NULL, EFI_OPEN_PROTOCOL_TEST_PROTOCOL);

			if (Status == EFI_UNSUPPORTED) {
			
				Status = BS->LocateDevicePath(&gEfiGraphicsOutputProtocolGuid, &DevicePath, LocateDevicePathHandle);
				if (EFI_ERROR (Status)) { Print(L"WritePciReg:   PCI VGA Adapter on %02x:%02x.%02x: This is not the main Video Card: %r\n", Bus, Device, Function, Status); continue;};
				
			};
	
			//Status=IoDev->Attributes (IoDev, EfiPciIoAttributeOperationEnable, EFI_PCI_IO_ATTRIBUTE_VGA_IO | EFI_PCI_IO_ATTRIBUTE_VGA_MEMORY | EFI_PCI_IO_ATTRIBUTE_IO | EFI_PCI_IO_ATTRIBUTE_BUS_MASTER, NULL);
			//if (EFI_ERROR (Status)) { Print(L"WritePciReg:   PCI VGA Adapter on %02x:%02x.%02x: Couldn't set Attributes: %r\n", Bus, Device, Function, Status); }

			//Print (L"WritePciReg:   PCI VGA Adapter on %02x:%02x.%02x: Located the main Video Card.\n", Bus, Device, Function);
//////////////////////
*/



/*
EFI_STATUS LoadVGABios(IN EFI_HANDLE ImageHandle, IN CHAR16 *PathName, UINT32 Int10hValue) {

	VOID                             *ROM_Addr;
	UINTN                             Int10hAddr;
	EFI_LOADED_IMAGE                 *SelfLoadedImage;
	EFI_FILE_PROTOCOL				 *vBiosFile;
	EFI_SIMPLE_FILE_SYSTEM_PROTOCOL  *Volume;
	EFI_FILE_HANDLE                   VolumeRootHandle;
	UINTN                            *BufferSize; 

	VolumeRootHandle = NULL;
	ROM_Addr         = NULL;
	BufferSize       = NULL;
	*BufferSize      = 0x10000;
	ROM_Addr         = (VOID *)(UINTN)0xC0000; // Use 0xC0000l on IA32
	Int10hAddr       = 0x40;                   // Use 0x40l    on IA32
	
	
	//Get me a LoadedImageProtocol of MySelf
	Status = BS->HandleProtocol (ImageHandle, &gEfiLoadedImageProtocolGuid, (VOID*)&SelfLoadedImage);
	if(EFI_ERROR(Status)) { Print(L"LoadedImageProtocol Error: %r\n", Status); return Status;  }
	
	//Now let's get a File Handle to the Root Directory from SelfImageHandle
	Status = BS->HandleProtocol (SelfLoadedImage->DeviceHandle, &gEfiSimpleFileSystemProtocolGuid, (VOID *) &Volume);
	if(EFI_ERROR(Status)) { Print(L"HandleProtocol Volume: %r\n", Status); return Status;  }

	//Open the bloody file (Root Directory)
	Status = Volume->OpenVolume( Volume, &VolumeRootHandle);
	if(EFI_ERROR(Status)) { Print(L"OpenRootVolume Error: %r\n", Status); return Status;  }


	//Open the VideoBios File
	VolumeRootHandle->Open(VolumeRootHandle, &vBiosFile, PathName, 0x0000000000000001, 0);
	if(EFI_ERROR(Status)) { Print(L"OpenFile Error: %r\n", Status); return Status;  }

	//No need for the Volume Root Handle
	VolumeRootHandle->Close(VolumeRootHandle);
*/
	/*//Unlock the RAM at 0xC0000
	//First for the Memory Controller Hub architectures
	Status=writePciRegister(0x00000090, 0x30);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000091, 0x33);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000092, 0x33);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000093, 0x33);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000094, 0x33);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000095, 0x33);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000096, 0x33);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000097, 0x00);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	//Then for the Platform Controller Hub architectures
	Status = EfiInitializeDriverLib (ImageHandle, SystemTable);
	if (!EFI_ERROR (Status)) {
	Status = EfiGetSystemConfigurationTable (&gEfiDxeServicesTableGuid, (VOID **) &DS);}
	if(EFI_ERROR(Status)) { Print(L"Cannot get DXE Services Table Error: %r\n", Status); return Status;  }
	Status=DS->SetMemorySpaceAttributes(0xC0000ll, 0x10000ll, EFI_MEMORY_WC);
	if(EFI_ERROR(Status)) { Print(L"Cannot set Memory Space Attributes for 0xC0000: %r\n", Status); return Status;  }

	//Allocate the Memory Pages
	//Status = BS->AllocatePages (EfiBootServicesData, *BufferSize/4096, (UINTN)&ROM_Addr);
	//if (EFI_ERROR (Status)) { Print(L"AllocatePool Error: %r\n", Status);return Status;}*/
/*
	//Start reading from the Video Bios File into the Video Bios address
	Status=vBiosFile->Read(vBiosFile, BufferSize, ROM_Addr);
	if(EFI_ERROR(Status)) { Print(L"ReadFile Error: %r\n", Status); return Status;  }
*/	
	//Lock the RAM at 0xC0000
	/*Status=writePciRegister(0x00000090, 0x10);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000091, 0x11);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000092, 0x11);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000093, 0x11);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }
	Status=writePciRegister(0x00000094, 0x11);
	if(EFI_ERROR(Status)) { Print(L"writePciRegister Error: %r\n", Status); return Status;  }*/
/*	

	Print(L"BufferSize = 0x%x\nMyBuffer Address: 0x%x", *BufferSize, ROM_Addr);
	
	//*BufferSize=262144;
	//BS->CopyMem(MyBuffer, (VOID *)0xc0000ll, *BufferSize);

	vBiosFile->Close(vBiosFile);

	//This is some wierd shit coppied from EFI-Shell! Fsck-it, it works!
	*(UINT32 *)(UINTN)Int10hAddr= *(UINT32 *)&Int10hValue;

	return EFI_SUCCESS;
	
}
*/
/*
//			Print (L" %04x\n", OptionRom->Signature);
			
//			SectionType=File;
//			switch (SectionType) {
				case 0x01:
					Print(L"EFI_SECTION_COMPRESSION\n");
					break;
				case 0x02:
					Print(L"EFI_SECTION_GUID_DEFINED\n");
					break;
				case 0x03:
					Print(L"EFI_SECTION_DISPOSABLE\n");
					break;
				case 0x10:
					Print(L"EFI_SECTION_PE32\n");
					break;
				case 0x11:
					Print(L"EFI_SECTION_PIC\n");
					break;
				case 0x13:
					Print(L"EFI_SECTION_DXE_DEPEX\n");
					break;
				case 0x16:
					Print(L"EFI_SECTION_COMPATIBILITY16\n");
					break;
				case 0x17:
					Print(L"EFI_SECTION_FIRMWARE_VOLUME_IMAGE\n");
					break;
				case 0x18:
					Print(L"EFI_SECTION_FREEFORM_SUBTYPE_GUID\n");
					break;
				case 0x19:
					Print(L"EFI_SECTION_RAW\n");
					break;
				case 0x1B:
					Print(L"EFI_SECTION_PEI_DEPEX\n");
					break;
				default:
					Print(L"EFI_SECTION_UNKNOWN\n");
					break;
			}

			
			OptionRom = File;*/
